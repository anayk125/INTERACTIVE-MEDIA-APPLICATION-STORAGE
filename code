<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>CyberDrive Studio Pro — Photographer Edition (DS Project)</title>
<script src="https://cdn.tailwindcss.com"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
<!-- Exif reader -->
<script src="https://cdn.jsdelivr.net/npm/exif-js"></script>

<style>
  :root{
    --accent: #00ffa1;
    --muted: #bfcfc7;
    --card: rgba(255,255,255,0.04);
  }
  body{
    background: linear-gradient(160deg,#0b0b0b 0%, #0f1113 60%);
    color: #e6f0ea;
    font-family: 'Inter', ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  }
  /* Hero */
  .hero{
    background-image: url('https://images.unsplash.com/photo-1504198453319-5ce911bafcde?auto=format&fit=crop&w=1600&q=80');
    background-size: cover; background-position: center;
    position: relative; height: 28vh; border-bottom: 1px solid rgba(255,255,255,0.04);
  }
  .hero::after{ content:""; position:absolute; inset:0; background:linear-gradient(180deg, rgba(0,0,0,0.6), rgba(0,0,0,0.8));}
  .hero-inner{ position:relative; z-index:2; display:flex; align-items:center; justify-content:center; height:100%;}
  .hero-title { font-weight:700; font-size:2rem; color:var(--accent); text-shadow:0 6px 30px rgba(0,255,161,0.08);}

  /* Cards */
  .photo-card { background: var(--card); border-radius:12px; border:1px solid rgba(255,255,255,0.04); overflow:hidden; transition:all .25s ease; position:relative; }
  .photo-card:hover{ transform:translateY(-6px) scale(1.01); box-shadow:0 10px 30px rgba(0,255,161,0.06); }
  .photo-card img{ width:100%; height:200px; object-fit:cover; display:block; transition:transform .35s ease; }
  .photo-card:hover img{ transform:scale(1.05); }
  .badge{ background: rgba(0,0,0,0.45); padding:4px 8px; border-radius:999px; font-size:12px; color:var(--muted); }

  /* Drag overlay */
  .drop-overlay{ position:fixed; inset:0; display:none; align-items:center; justify-content:center; z-index:60; background: rgba(0,0,0,0.6); color:var(--accent); font-size:1.6rem; }

  /* Modal */
  .modal-backdrop{ position:fixed; inset:0; background:rgba(0,0,0,0.9); display:none; align-items:center; justify-content:center; z-index:80; padding:2rem;}
  .modal-backdrop.show{ display:flex; }
  .modal-card{ width:95%; max-width:1100px; display:flex; gap:1rem; }
  .modal-img{ max-height:80vh; max-width:65%; object-fit:contain; border-radius:8px; }
  .meta { color:var(--muted); font-size:14px; }

  /* Left sidebar */
  .sidebar{ border-right:1px solid rgba(255,255,255,0.03); min-height:60vh; }

  /* small utilities */
  .tag { background:rgba(0,0,0,0.4); color:var(--accent); padding:4px 8px; border-radius:999px; font-size:12px; }
  .control { background: rgba(255,255,255,0.03); border:1px solid rgba(255,255,255,0.04); padding:6px 10px; border-radius:8px; color:var(--muted); }
  .floating { position:fixed; right:1.6rem; bottom:1.8rem; z-index:70; }
</style>
</head>
<body>

  <!-- HERO -->
  <section class="hero">
    <div class="hero-inner">
      <div class="text-center">
        <div class="hero-title">CyberDrive Studio Pro</div>
        <div class="text-sm text-white/70 mt-2">Photographer portfolio & DS project — albums, tags, indexing, undo, drag-drop, EXIF</div>
      </div>
    </div>
  </section>

  <!-- APP -->
  <main class="max-w-7xl mx-auto mt-8 px-6">
    <div class="flex gap-6">

      <!-- LEFT SIDEBAR (Albums & Stats) -->
      <aside class="w-64 sidebar py-4">
        <div class="px-4">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold">Albums</h3>
            <button id="newAlbumBtn" class="control"><i class="fa fa-plus"></i></button>
          </div>

          <ul id="albumList" class="space-y-2 mb-6">
            <!-- Populated by JS -->
          </ul>

          <div class="mb-4">
            <h4 class="text-sm font-semibold mb-2">Filters</h4>
            <div class="flex flex-col gap-2">
              <input id="tagFilter" placeholder="Filter by tag (comma-separated)" class="control" />
              <select id="sortSelect" class="control">
                <option value="date_desc">Sort: Date (Newest)</option>
                <option value="date_asc">Date (Oldest)</option>
                <option value="name_asc">Name (A → Z)</option>
                <option value="name_desc">Name (Z → A)</option>
                <option value="size_desc">Size (Large)</option>
                <option value="size_asc">Size (Small)</option>
              </select>
            </div>
          </div>

          <div class="mb-4">
            <h4 class="text-sm font-semibold mb-2">Project Stats</h4>
            <div class="text-sm meta" id="statsBlock">
              <!-- JS updated -->
            </div>
          </div>

          <div>
            <h4 class="text-sm font-semibold mb-2">Undo (Stack)</h4>
            <div class="flex gap-2">
              <button id="undoBtn" class="bg-indigo-600 hover:bg-indigo-500 text-white px-3 py-2 rounded-md">Undo</button>
              <button id="clearAllBtn" class="bg-red-600 hover:bg-red-500 text-white px-3 py-2 rounded-md">Clear All</button>
            </div>
          </div>
        </div>
      </aside>

      <!-- MAIN -->
      <section class="flex-1">
        <!-- Toolbar -->
        <div class="flex items-center justify-between mb-4 gap-4">
          <div class="flex items-center gap-3">
            <input type="file" id="fileInput" multiple accept="image/*" class="hidden"/>
            <button id="chooseBtn" class="bg-green-500 hover:bg-green-400 text-black px-4 py-2 rounded-md"><i class="fa fa-upload mr-2"></i>Upload</button>
            <button id="urlBtn" class="bg-blue-600 hover:bg-blue-500 text-white px-4 py-2 rounded-md"><i class="fa fa-link mr-2"></i>From URL</button>
            <button id="dragHintBtn" class="control"><i class="fa fa-hand-paper"></i> Drag & Drop</button>

            <div class="ml-4 flex items-center gap-2">
              <input id="searchBox" placeholder="Search (binary index search available)" class="control" />
              <button id="indexBtn" class="control">Build Index</button>
            </div>
          </div>

          <div class="flex items-center gap-3">
            <span id="selectedCount" class="tag">0 selected</span>
            <button id="bulkTagBtn" class="control"><i class="fa fa-tag"></i> Tag</button>
            <button id="moveBtn" class="control"><i class="fa fa-folder-open"></i> Move</button>
            <button id="downloadBtn" class="control"><i class="fa fa-download"></i> Download</button>
            <button id="deleteBtn" class="control text-red-400"><i class="fa fa-trash"></i> Delete</button>
          </div>
        </div>

        <!-- Albums breadcrumb -->
        <div class="mb-3 flex items-center gap-3">
          <div class="badge px-3 py-1">Album: <span id="currentAlbum">All Photos</span></div>
          <div class="meta text-sm" id="indexInfo"></div>
        </div>

        <!-- Gallery grid -->
        <div id="galleryGrid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-6">
          <!-- JS injected photo-card items -->
        </div>

        <!-- Pagination -->
        <div class="mt-6 flex items-center justify-between">
          <div class="text-sm meta" id="pageInfo"></div>
          <div class="flex gap-2">
            <button id="prevPage" class="control">Prev</button>
            <button id="nextPage" class="control">Next</button>
          </div>
        </div>

      </section>
    </div>
  </main>

  <!-- Floating Upload -->
  <div class="floating">
    <button id="floatingUpload" class="bg-gradient-to-br from-green-400 to-green-300 p-4 rounded-full shadow-lg text-black"><i class="fa fa-plus"></i></button>
  </div>

  <!-- Drop overlay -->
  <div id="dropOverlay" class="drop-overlay"><i class="fa fa-cloud-upload-alt mr-3"></i> Drop images to upload</div>

  <!-- Preview Modal -->
  <div id="modal" class="modal-backdrop">
    <div class="modal-card bg-gradient-to-br from-gray-900 to-black/80 p-4 rounded-lg flex items-start">
      <img id="modalImage" class="modal-img" alt="preview">
      <div class="flex-1">
        <div class="flex items-start justify-between">
          <div>
            <h3 id="modalName" class="text-white text-xl font-semibold"></h3>
            <div id="modalMeta" class="meta mt-2"></div>
          </div>
          <div class="flex gap-2">
            <button id="toggleWatermark" class="control">Toggle Watermark</button>
            <button id="downloadSingle" class="control"><i class="fa fa-download"></i></button>
            <button id="closeModal" class="bg-red-600 px-3 py-2 rounded-md text-white">Close</button>
          </div>
        </div>

        <div class="mt-4">
          <h4 class="text-sm font-semibold">Tags</h4>
          <div id="modalTags" class="flex gap-2 mt-2"></div>

          <h4 class="text-sm font-semibold mt-4">EXIF / Camera Info</h4>
          <pre id="exifData" class="meta mt-2 whitespace-pre-wrap"></pre>
        </div>
      </div>
    </div>
  </div>

<script>
/* ============================
  Data model & structures
   - photos: array of photo objects
   - albums: Map albumName -> array of photo ids
   - tags per photo: Set
   - index: sorted array of {name, id} used for binary search
   - undoStack: stack for restore
   Stored persistently in localStorage as 'cd_photos' and 'cd_albums'
   Example photo object:
   {
     id: "uuid",
     src: "data:image/...",
     name: "IMG123.jpg",
     size: 34567,
     date: "...",
     tags: ["wedding","bw"],
     album: "All Photos",
     exif: {Make:..., Model:...}
   }
============================ */

const PAGE_SIZE = 12;
let photos = [];         // array of photo objects
let albums = new Map();  // albumName -> Set(ids)
let indexArr = [];       // sorted index [{nameLower, id}]
let undoStack = [];      // stack of deleted items for undo
let currentAlbum = "All Photos";
let selected = new Set();
let page = 1;

// DOM refs
const fileInput = document.getElementById('fileInput');
const chooseBtn = document.getElementById('chooseBtn');
const urlBtn = document.getElementById('urlBtn');
const floatingUpload = document.getElementById('floatingUpload');
const galleryGrid = document.getElementById('galleryGrid');
const albumList = document.getElementById('albumList');
const newAlbumBtn = document.getElementById('newAlbumBtn');
const currentAlbumLabel = document.getElementById('currentAlbum');
const selectedCount = document.getElementById('selectedCount');
const deleteBtn = document.getElementById('deleteBtn');
const downloadBtn = document.getElementById('downloadBtn');
const moveBtn = document.getElementById('moveBtn');
const bulkTagBtn = document.getElementById('bulkTagBtn');
const clearAllBtn = document.getElementById('clearAllBtn');
const undoBtn = document.getElementById('undoBtn');
const tagFilter = document.getElementById('tagFilter');
const sortSelect = document.getElementById('sortSelect');
const searchBox = document.getElementById('searchBox');
const indexBtn = document.getElementById('indexBtn');
const indexInfo = document.getElementById('indexInfo');
const statsBlock = document.getElementById('statsBlock');
const pageInfo = document.getElementById('pageInfo');
const prevPage = document.getElementById('prevPage');
const nextPage = document.getElementById('nextPage');

// modal
const modal = document.getElementById('modal');
const modalImage = document.getElementById('modalImage');
const modalName = document.getElementById('modalName');
const modalMeta = document.getElementById('modalMeta');
const modalTags = document.getElementById('modalTags');
const exifData = document.getElementById('exifData');
const closeModal = document.getElementById('closeModal');
const toggleWatermark = document.getElementById('toggleWatermark');
const downloadSingle = document.getElementById('downloadSingle');

// overlay
const dropOverlay = document.getElementById('dropOverlay');

// init
loadFromStorage();
renderAll();

/* -------------------------
   Event hooks
------------------------- */
chooseBtn.addEventListener('click', () => fileInput.click());
floatingUpload.addEventListener('click', () => fileInput.click());
fileInput.addEventListener('change', handleFileUpload);
urlBtn.addEventListener('click', handleUrlUpload);

newAlbumBtn.addEventListener('click', () => {
  const name = prompt('New album name:');
  if(name) createAlbum(name);
});

albumList.addEventListener('click', (e) => {
  const li = e.target.closest('li[data-album]');
  if(!li) return;
  currentAlbum = li.dataset.album;
  page = 1;
  renderAll();
});

deleteBtn.addEventListener('click', bulkDelete);
downloadBtn.addEventListener('click', bulkDownload);
moveBtn.addEventListener('click', bulkMove);
bulkTagBtn.addEventListener('click', bulkTag);
undoBtn.addEventListener('click', undoDelete);
clearAllBtn.addEventListener('click', clearAllData);

tagFilter.addEventListener('input', () => { page = 1; renderAll(); });
sortSelect.addEventListener('change', () => { page = 1; renderAll(); });
searchBox.addEventListener('keydown', (e) => { if(e.key === 'Enter'){ quickSearch(); }});
indexBtn.addEventListener('click', buildIndex);

prevPage.addEventListener('click', () => { if(page>1){ page--; renderAll(); }});
nextPage.addEventListener('click', () => { page++; renderAll(); });

document.addEventListener('dragenter', (e) => { e.preventDefault(); dropOverlay.style.display = 'flex'; }, false);
document.addEventListener('dragover', (e)=>{ e.preventDefault(); }, false);
document.addEventListener('dragleave', (e)=>{ dropOverlay.style.display = 'none'; }, false);
document.addEventListener('drop', (e)=>{ e.preventDefault(); dropOverlay.style.display='none'; handleDrop(e); }, false);

/* -------------------------
   Core functions
------------------------- */

function uid(){ return 'id_'+Math.random().toString(36).slice(2,10); }

function saveToStorage(){
  localStorage.setItem('cd_photos', JSON.stringify(photos));
  // save albums map as object
  const obj = {};
  for(const [k,s] of albums) obj[k] = Array.from(s);
  localStorage.setItem('cd_albums', JSON.stringify(obj));
}

function loadFromStorage(){
  try{
    photos = JSON.parse(localStorage.getItem('cd_photos') || '[]');
    const albObj = JSON.parse(localStorage.getItem('cd_albums') || '{}');
    albums = new Map();
    for(const k of Object.keys(albObj)){
      albums.set(k, new Set(albObj[k]));
    }
    // Ensure default album exists and contains all photo ids with no album
    if(!albums.has('All Photos')) albums.set('All Photos', new Set());
    // assign photo ids to albums if album missing
    const existingIds = new Set(photos.map(p=>p.id));
    for(const p of photos){
      if(!p.album) p.album = 'All Photos';
      if(!albums.has(p.album)) albums.set(p.album, new Set());
      albums.get(p.album).add(p.id);
    }
    // Clean albums of nonexistent ids
    for(const [k,s] of albums) {
      for(const id of Array.from(s)) if(!existingIds.has(id)) s.delete(id);
    }
  }catch(err){
    console.error('load error',err);
    photos = []; albums = new Map([['All Photos', new Set()]]);
  }
  buildIndex(); updateStats();
}

function renderAll(){
  renderAlbumList();
  renderGallery();
  updateSelectedUI();
  saveToStorage();
  updateStats();
}

function createAlbum(name){
  if(albums.has(name)){ alert('Album already exists'); return; }
  albums.set(name, new Set());
  renderAlbumList();
  saveToStorage();
}

function renderAlbumList(){
  albumList.innerHTML = '';
  // show albums sorted by size descending
  const arr = Array.from(albums.entries()).map(([name,set])=>({name,count:set.size}));
  arr.sort((a,b)=> b.count - a.count || a.name.localeCompare(b.name));
  for(const a of arr){
    const li = document.createElement('li');
    li.setAttribute('data-album', a.name);
    li.className = 'flex items-center justify-between px-2 py-2 rounded-md hover:bg-white/2 cursor-pointer';
    li.innerHTML = `<div><strong class="block">${a.name}</strong><span class="meta text-xs">${a.count} photos</span></div>
                    <div class="flex gap-2"><button class="control btn-rename" data-album="${a.name}" title="Rename"><i class="fa fa-edit"></i></button>
                    <button class="control btn-delete-album" data-album="${a.name}" title="Delete"><i class="fa fa-trash"></i></button></div>`;
    albumList.appendChild(li);
  }
  // album control handlers
  Array.from(albumList.querySelectorAll('.btn-delete-album')).forEach(b=>{
    b.addEventListener('click', (e)=>{
      e.stopPropagation();
      const nm = b.dataset.album;
      if(nm === 'All Photos'){ alert('Cannot delete base album'); return; }
      if(confirm(`Delete album "${nm}"? photos will go to All Photos`)){
        const ids = albums.get(nm) || new Set();
        for(const id of ids){ const p = photos.find(x=>x.id===id); if(p){ p.album='All Photos'; albums.get('All Photos').add(id); } }
        albums.delete(nm);
        renderAll();
      }
    });
  });
  Array.from(albumList.querySelectorAll('.btn-rename')).forEach(b=>{
    b.addEventListener('click',(e)=>{
      e.stopPropagation();
      const old = b.dataset.album;
      const newName = prompt('Rename album:', old);
      if(newName && newName !== old){
        if(albums.has(newName)){ alert('Name exists'); return; }
        const members = albums.get(old);
        albums.set(newName, members);
        albums.delete(old);
        // update photo objects
        for(const id of members){ const p = photos.find(x=>x.id===id); if(p) p.album = newName; }
        if(currentAlbum === old) currentAlbum = newName;
        renderAll();
      }
    });
  });
}

function renderGallery(){
  // Filter by album
  let ids = currentAlbum === 'All Photos' ? photos.map(p=>p.id) : Array.from(albums.get(currentAlbum) || []);
  // Convert to photo objects
  let list = ids.map(id => photos.find(p=>p.id===id)).filter(Boolean);

  // Tag filter
  const tf = tagFilter.value.trim().toLowerCase();
  if(tf){
    const tags = tf.split(',').map(s=>s.trim()).filter(Boolean);
    if(tags.length){
      list = list.filter(p => tags.every(t => p.tags && p.tags.map(x=>x.toLowerCase()).includes(t)));
    }
  }

  // Search box (substring)
  const q = searchBox.value.trim().toLowerCase();
  if(q) {
    // If index exists and query exact match attempt binary search
    list = list.filter(p => p.name.toLowerCase().includes(q) || (p.tags||[]).some(t=>t.toLowerCase().includes(q)));
  }

  // Sort
  const s = sortSelect.value;
  list.sort((a,b)=>{
    if(s==='date_desc') return (new Date(b.date || 0)) - (new Date(a.date || 0));
    if(s==='date_asc') return (new Date(a.date || 0)) - (new Date(b.date || 0));
    if(s==='name_asc') return a.name.localeCompare(b.name);
    if(s==='name_desc') return b.name.localeCompare(a.name);
    if(s==='size_asc') return (a.size||0) - (b.size||0);
    if(s==='size_desc') return (b.size||0) - (a.size||0);
    return 0;
  });

  // Pagination
  const total = list.length;
  const pages = Math.max(1, Math.ceil(total / PAGE_SIZE));
  if(page > pages) page = pages;
  const start = (page-1)*PAGE_SIZE;
  const pageItems = list.slice(start, start+PAGE_SIZE);

  pageInfo.textContent = `Showing ${start+1}-${start+pageItems.length} of ${total} photos | Page ${page} of ${pages}`;

  // render items
  galleryGrid.innerHTML = '';
  for(const p of pageItems){
    const card = document.createElement('div');
    card.className = 'photo-card';
    card.dataset.id = p.id;
    card.innerHTML = `
      <div class="relative">
        <img src="${p.src}" alt="${p.name}" loading="lazy" />
        <div style="position:absolute; left:8px; top:8px;"><span class="badge">${p.album}</span></div>
        <div style="position:absolute; right:8px; top:8px;">
          <input type="checkbox" class="select-checkbox" ${selected.has(p.id)?'checked':''}/>
        </div>
      </div>
      <div class="p-3">
        <div class="flex items-center justify-between">
          <div>
            <div class="text-sm font-semibold" title="${p.name}">${p.name}</div>
            <div class="meta text-xs">${p.date || 'Unknown date'}</div>
          </div>
          <div class="text-sm meta">${formatSize(p.size||0)}</div>
        </div>
        <div class="mt-3 flex gap-2">
          ${(p.tags||[]).slice(0,3).map(t=>`<span class="tag">${t}</span>`).join(' ')}
        </div>
      </div>`;
    galleryGrid.appendChild(card);

    // handlers
    card.querySelector('img').addEventListener('click', ()=> openModal(p.id));
    card.querySelector('.select-checkbox').addEventListener('change', (e)=>{
      if(e.target.checked) selected.add(p.id); else selected.delete(p.id);
      updateSelectedUI();
    });

    // drag into album support from photo card
    card.draggable = true;
    card.addEventListener('dragstart', (ev)=> { ev.dataTransfer.setData('text/photo-id', p.id); });
    card.addEventListener('dblclick', ()=> openModal(p.id));
  }
}

function updateSelectedUI(){
  selectedCount.textContent = `${selected.size} selected`;
}

function formatSize(bytes){
  if(bytes < 1024) return bytes+' B';
  if(bytes < 1024*1024) return (bytes/1024).toFixed(1)+' KB';
  return (bytes/1024/1024).toFixed(2)+' MB';
}

/* -------------------------
   Upload & parsing
------------------------- */
function handleFileUpload(e){
  const files = Array.from(e.target.files || e);
  if(files.length === 0) return;
  const albumName = currentAlbum || 'All Photos';
  files.forEach(file => {
    if(!file.type.startsWith('image/')) return;
    const reader = new FileReader();
    reader.onload = (ev) => {
      const id = uid();
      const obj = {
        id, src: ev.target.result, name: file.name, size: file.size, date: new Date().toLocaleString(),
        tags: [], album: albumName, exif: {}
      };
      photos.push(obj);
      if(!albums.has(albumName)) albums.set(albumName, new Set());
      albums.get(albumName).add(id);
      // read exif
      try{
        EXIF.getData(file, function(){
          const all = EXIF.getAllTags(this);
          obj.exif = all;
          saveToStorage(); // save exif
        });
      }catch(err){}
      renderAll();
    };
    reader.readAsDataURL(file);
  });
  // reset input
  if(e.target) e.target.value = '';
}

function handleDrop(e){
  const items = Array.from(e.dataTransfer.files || []);
  handleFileUpload(items);
}

async function handleUrlUpload(){
  const url = prompt('Enter direct image URL (must be CORS-allowed):');
  if(!url) return;
  try{
    // try fetch and convert to blob (gives size)
    const res = await fetch(url);
    const blob = await res.blob();
    const reader = new FileReader();
    reader.onload = (ev) => {
      const id = uid();
      const name = url.split('/').pop().split('?')[0] || 'remote.jpg';
      const obj = { id, src: ev.target.result, name, size: blob.size, date: new Date().toLocaleString(), tags: [], album: currentAlbum||'All Photos', exif:{}};
      photos.push(obj);
      if(!albums.has(obj.album)) albums.set(obj.album, new Set());
      albums.get(obj.album).add(id);
      renderAll();
    };
    reader.readAsDataURL(blob);
  }catch(err){
    alert('Unable to fetch image (CORS or network). You can instead download and upload file directly.');
  }
}

/* -------------------------
   Modal & single actions
------------------------- */
let watermarkOn = false;
function openModal(id){
  const p = photos.find(x=>x.id===id);
  if(!p) return;
  modalImage.src = p.src;
  modalName.textContent = p.name;
  modalMeta.innerHTML = `<div class="meta">Album: ${p.album} • Size: ${formatSize(p.size||0)} • Date: ${p.date}</div>`;
  modalTags.innerHTML = '';
  (p.tags||[]).forEach(t=>{
    const sp = document.createElement('span');
    sp.className='tag';
    sp.textContent = t;
    modalTags.appendChild(sp);
  });
  exifData.textContent = JSON.stringify(p.exif || {}, null, 2);
  modal.classList.add('show');
  // toggle watermark button toggles overlay for download view (not persistent)
  toggleWatermark.onclick = ()=>{
    watermarkOn = !watermarkOn;
    if(watermarkOn){
      // simple watermark drawn on canvas if user downloads
      alert('Watermark will be applied on download preview (client-side).');
    }else{
      alert('Watermark off.');
    }
  };
  downloadSingle.onclick = ()=> downloadImage(p);
}
closeModal.addEventListener('click', ()=> modal.classList.remove('show'));
modal.addEventListener('click', (e)=> { if(e.target === modal) modal.classList.remove('show'); });

function downloadImage(photo){
  // create a link
  const a = document.createElement('a');
  a.href = photo.src;
  a.download = photo.name;
  document.body.appendChild(a);
  a.click();
  a.remove();
}

/* -------------------------
   Bulk actions
------------------------- */
function bulkDelete(){
  if(selected.size === 0){ alert('Select photos first'); return; }
  if(!confirm(`Delete ${selected.size} selected photos?`)) return;
  const deleted = [];
  for(const id of Array.from(selected)){
    const idx = photos.findIndex(p=>p.id===id);
    if(idx>=0){
      deleted.push(photos[idx]);
      // remove from album sets
      if(albums.has(photos[idx].album)) albums.get(photos[idx].album).delete(id);
      photos.splice(idx,1);
      selected.delete(id);
    }
  }
  undoStack.push({type:'delete', items:deleted});
  renderAll();
}

function bulkDownload(){
  if(selected.size === 0){ alert('Select photos first'); return; }
  for(const id of selected){
    const p = photos.find(x=>x.id === id);
    if(p) downloadImage(p);
  }
}

function bulkMove(){
  if(selected.size === 0){ alert('Select photos first'); return; }
  const dest = prompt('Move selected photos to album (existing or new):', 'All Photos');
  if(!dest) return;
  if(!albums.has(dest)) albums.set(dest, new Set());
  for(const id of Array.from(selected)){
    const p = photos.find(x=>x.id===id);
    if(p){
      // remove from old album
      if(albums.has(p.album)) albums.get(p.album).delete(p.id);
      p.album = dest;
      albums.get(dest).add(p.id);
    }
  }
  selected.clear(); renderAll();
}

function bulkTag(){
  if(selected.size === 0){ alert('Select photos first'); return; }
  const t = prompt('Add tags (comma separated):');
  if(!t) return;
  const tags = t.split(',').map(x=>x.trim()).filter(Boolean);
  for(const id of selected){
    const p = photos.find(x=>x.id===id);
    if(p){
      if(!p.tags) p.tags = [];
      for(const tg of tags) if(!p.tags.includes(tg)) p.tags.push(tg);
    }
  }
  selected.clear(); renderAll();
}

/* -------------------------
   Undo & clear
------------------------- */
function undoDelete(){
  if(undoStack.length === 0){ alert('Nothing to undo'); return; }
  const op = undoStack.pop();
  if(op.type === 'delete'){
    for(const p of op.items){
      photos.push(p);
      if(!albums.has(p.album)) albums.set(p.album, new Set());
      albums.get(p.album).add(p.id);
    }
    renderAll();
  }
}

function clearAllData(){
  if(!confirm('This will remove ALL saved photos and albums. Continue?')) return;
  photos = []; albums = new Map([['All Photos', new Set()]]);
  undoStack = [];
  selected.clear();
  saveToStorage(); renderAll();
}

/* -------------------------
   Indexing & search (binary search example)
------------------------- */
function buildIndex(){
  indexArr = photos.map(p=>({nameLower: p.name.toLowerCase(), id: p.id}));
  indexArr.sort((a,b)=> a.nameLower.localeCompare(b.nameLower));
  indexInfo.textContent = `Index built (${indexArr.length} items) — ready for binary search.`;
}

function quickSearch(){
  const q = searchBox.value.trim().toLowerCase();
  if(!q) { alert('Type name to search and press Enter'); return; }
  if(indexArr.length === 0){ buildIndex(); }
  // binary search for exact match
  let l=0, r=indexArr.length-1, found=[];
  while(l<=r){
    const mid = Math.floor((l+r)/2);
    const name = indexArr[mid].nameLower;
    if(name === q){ found.push(indexArr[mid].id); break; }
    if(name < q) l = mid +1; else r = mid -1;
  }
  // Also include partial matches by scanning neighbors
  if(found.length === 0){
    // fallback to substring search
    const matches = indexArr.filter(it => it.nameLower.includes(q)).map(it=>it.id);
    if(matches.length === 0){ alert('No matches'); return; }
    // show in album
    // show matched items across all photos
    currentAlbum = 'All Photos';
    // filter via temporary tagFilter and searchBox
    searchBox.value = q;
    page = 1;
    renderAll();
  } else {
    searchBox.value = q;
    page = 1;
    renderAll();
  }
}

/* -------------------------
   Utilities & stats
------------------------- */
function updateStats(){
  const total = photos.length;
  const albumCounts = Array.from(albums.entries()).map(([k,s])=>({k,c:s.size}));
  const topAlbum = albumCounts.sort((a,b)=>b.c - a.c)[0] || {k:'All Photos', c:0};
  statsBlock.innerHTML = `Photos: <strong>${total}</strong><br/>Albums: <strong>${albums.size}</strong><br/>Top album: <strong>${topAlbum.k} (${topAlbum.c})</strong>`;
}

/* -------------------------
   Drag photo into album (droppable albums)
------------------------- */
albumList.addEventListener('dragover', (e)=> e.preventDefault());
albumList.addEventListener('drop', (e)=>{
  e.preventDefault();
  const id = e.dataTransfer.getData('text/photo-id');
  const li = e.target.closest('li[data-album]');
  if(!li) return;
  const album = li.dataset.album;
  const p = photos.find(x=>x.id===id);
  if(p){
    if(albums.has(p.album)) albums.get(p.album).delete(p.id);
    p.album = album;
    if(!albums.has(album)) albums.set(album, new Set());
    albums.get(album).add(p.id);
    renderAll();
  }
});

/* -------------------------
   Helpers for initial demo (load sample images if empty)
------------------------- */
if(photos.length === 0){
  // load a few sample remote images (CORS-friendly Unsplash images)
  const sampleUrls = [
    'https://images.unsplash.com/photo-1519681393784-d120267933ba?auto=format&fit=crop&w=1200&q=80',
    'https://images.unsplash.com/photo-1499084732479-de2c02d45fc4?auto=format&fit=crop&w=1200&q=80',
    'https://images.unsplash.com/photo-1472214103451-9374bd1c798e?auto=format&fit=crop&w=1200&q=80',
    'https://images.unsplash.com/photo-1500530855697-b586d89ba3ee?auto=format&fit=crop&w=1200&q=80'
  ];
  (async ()=>{
    for(const url of sampleUrls){
      try{
        const res = await fetch(url);
        const blob = await res.blob();
        const reader = new FileReader();
        await new Promise((resolve)=> {
          reader.onload = (ev)=> {
            const id = uid(); const name = url.split('/').pop().split('?')[0];
            const obj = {id, src: ev.target.result, name, size: blob.size, date: new Date().toLocaleString(), tags:[], album:'All Photos', exif:{}};
            photos.push(obj); albums.get('All Photos').add(id);
            resolve();
          };
          reader.readAsDataURL(blob);
        });
      }catch(err){}
    }
    renderAll();
  })();
}

function updateSelectedUI(){ selectedCount.textContent = `${selected.size} selected`; }

/* Save periodically */
setInterval(()=> saveToStorage(), 2000);

</script>

</body>
</html>

